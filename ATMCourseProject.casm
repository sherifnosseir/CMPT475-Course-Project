/* CoreASM specification */
CoreASM ATM

use Standard
use QueuePlugin

init Main

universe Agents = {tillControl1, tillControl2, tillControl3, centralNetwork, observer, environment} 
universe till = {till1, till2, till3}

enum TillStatus = {Available, Processing, InUse, OutOfOrder}
enum UserOperation = {CheckBalance, Withdraw, RequestStatement, LogOut}
enum AccountStatus = {LoggedIn, LoggedOut, AccountLocked}
enum CardStatus = {Empty, Inserted, Remove}
enum DatabaseState = {Running, Stopped}

// Till Functions
function tillStatus: till -> TillStatus
function userOperation: till -> UserOperation
function cardStatus: till -> CardStatus
function cardAttempts: till -> NUMBER
function controlled cardNumber: till -> String
function controlled pinNumber: till -> String
function accountStatus: till -> AccountStatus
function controlled mainMenu: -> SET

function selectTill: program -> till

// Database Functions
function controlled dbCards: -> MAP
function controlled dbAccounts: -> MAP
function databaseState: -> DatabaseState

function controlled InQueue: -> LIST
function controlled OutQueue: -> LIST


//Main Program
rule Main =
par
        forall t in till do {
                tillStatus(t) := Available
                cardStatus(t) := Empty
                cardAttempts(t) := 0
        } 

		seqblock        
        mainMenu := {}
        forall u in UserOperation do {
                add u to mainMenu
        }
        
        
        InQueue := []
        OutQueue := []

        dbAccounts := { -> }
        add {12345 -> {"address"->"123 homeless street", "balance"->1000, "withdrawLimit"->200},
        12346 -> {"address"->"123 rich street", "balance"->10000000, "withdrawLimit"->10000}} to dbAccounts
        
        dbCards := { -> }
        add {1 -> {"pin"->"123", "accountN"->12345, "withdraw"->0},
        2 -> {"pin"->"234", "accountN"->12346, "withdraw"->0},
        3 -> {"pin"->"345", "accountN"->12345, "withdraw"->0}} to dbCards
        
        endseqblock
        selectTill(tillControl1) := till1
        selectTill(tillControl2) := till2
        selectTill(tillControl3) := till3
        
        seqblock
	        program(self):=undef
	        program(tillControl1):=@TillControl
	        program(tillControl2):=@TillControl
	        program(tillControl3):=@TillControl
	        program(centralNetwork):=@CentralNetworkControl
	//        program(observer):=@ObserverProgram
	        program(environment):=@EnvironmentProgram
        endseqblock
endpar

rule TillControl =
par
	t := selectTill(self)
	
    if tillStatus(t) != Processing then
        if cardStatus(t) = Empty then
                print t + " - Please insert card"
        else if cardStatus(t) = Inserted then
                if tillStatus(t) = Available then
                seqblock
                		ProcessLogin(t)
                		userOperation(t) := LogIn
                endseqblock
                else
                        //Get Operation
                        if tillStatus(t) = InUse then
                                GetOperation(t)                                                
endpar

// Process input f
rule ProcessLogin(t) = 
        seqblock
        		seq
            		pinNumber(t) := toString(input(t + " - Insert Pin Now : " + cardNumber(t)))
            	next seqblock     		
					tillStatus(t) := Processing
        			if (pinNumber(t) != undef) then seqblock
        				cardInfo := dbCards()(cardNumber(t))
        				if pinNumber(t) = cardInfo()("pin") then {
        					tillStatus(t) := InUse
        					print "Correct Pin"
    					}
        				else seqblock
        					cardAttempts(t) := cardAttempts(t) + 1
        					if (cardAttempts(t) >= 3) then 
                				KeepCard(t)
                			else seqblock
	                			print t + ": Invalid Pin\nAttempts so far: " + cardAttempts(t)
           						tillStatus(t) :=  Available
           					endseqblock
       					endseqblock
    				endseqblock
    			endseqblock
		endseqblock

rule KeepCard(t) =
        par
                ResetTill(t)
                print "Card is kept by this ATM"
        endpar

rule ResetTill(t) =
seqblock
        cardAttempts(t) := 0
		pinNumber(t) := undef
        print "ATM is now available"
        cardStatus(t) := Empty
        tillStatus(t) := Available
        //Add card to list of cards not returned
endseqblock

rule GetOperation(t) = 
seqblock
        userOperation(t) := toOperation(input(t + " - Select a service\n" + mainMenu))
        if (userOperation(t) != undef) then par
        		tillStatus(t) := Processing
                if (userOperation(t) = CheckBalance) then seqblock
                		PushToInQueue(t)
                        endseqblock
                if (userOperation(t) = Withdraw) then seqblock
                		PushToInQueue(t)
                        endseqblock
                if (userOperation(t) = RequestStatement) then seqblock
                		PushToInQueue(t)
                        endseqblock
                if (userOperation(t) = LogOut) then seqblock
                        print "Please take your card"
                        cardStatus(t) := Remove
                        endseqblock
                endpar
        else
                print "Invalid Input"
endseqblock

rule ToTill(currentTill, operation) = 
seqblock
        if userOperation(currentTill) = CheckBalance then seqblock
                print "Your balance is " + operation
                tillStatus(currentTill) := InUse
        endseqblock
        else if userOperation(currentTill) = Withdraw then seqblock
                print "Withdraw"
        endseqblock
        else if userOperation(currentTill) = RequestStatement then seqblock
                print "A mail will be sent to " + operation
                tillStatus(currentTill) := InUse
        endseqblock
endseqblock

rule toOperation(userInput) = 
        return op in 
                choose x in UserOperation with toString(x) = userInput do
                        op := x

rule CentralDatabase(currentTill) =
seqblock
        if userOperation(currentTill) = CheckBalance then seqblock
                cardInfo := dbCards()(cardNumber(currentTill))
                accountMap := dbAccounts()(cardInfo()("accountN"))
                
            	PushToOutQueue([currentTill, accountMap()("balance")])
        endseqblock
        else if userOperation(currentTill) = Withdraw then seqblock
				cardInfo := dbCards()(cardNumber(currentTill))
                accountMap(t) := dbAccounts()(cardInfo()("accountN"))
                
                if (cardInfo()("withdraw") + 100 > accountMap()("withdrawLimit")) then seqblock
                	PushToOutQueue([currentTill, "Limit Exceeded"])
                endseqblock
                else seqblock
                	PushToOutQueue([currentTill, "Success"])
                endseqblock
        endseqblock
        else if userOperation(currentTill) = ConfirmWithdraw then seqblock
        		cardInfo := dbCards()(cardNumber(currentTill))
                updateWithdraw := cardInfo()("withdraw")
                updateWithdraw := updateWithdraw + 100
                remove cardNumber(currentTill) from dbCards
                
                add {cardNumber(currentTill) -> {"pin"->cardInfo()("pin"), "accountN"->cardInfo()("accountN"), "withdraw"->updateWithdraw}} to dbCards
                PushToOutQueue([currentTill, "Confirm Withdraw"]) 
        endseqblock
        else if userOperation(currentTill) = RequestStatement then seqblock
                cardInfo := dbCards()(cardNumber(currentTill))
                accountMap := dbAccounts()(cardInfo()("accountN"))
				
				PushToOutQueue([currentTill, accountMap()("address")])                
        endseqblock
endseqblock

rule CentralNetworkControl =
seqblock
        if (size(InQueue) != 0) then seqblock
        		print "Pushing to database"
                dequeue nextDbOp from InQueue
                CentralDatabase(nextDbOp)
        endseqblock
        
        if (size(OutQueue) != 0) then seqblock
        		print "Pushing to Till"
                dequeue nextTillOp from OutQueue
                ToTill(head(nextTillOp), head(tail(nextTillOp)))
        endseqblock
endseqblock

rule PushToInQueue(x) =
par
	enqueue x into InQueue
endpar

rule PushToOutQueue(x) =
par
	enqueue x into OutQueue
endpar

/*rule ObserverProgram =
{

} */

rule EnvironmentProgram =
par
        choose t in till do
        par
        //Simulating user interaction
                if cardStatus(t) = Remove then par
                        print "User has removed a card"
                        ResetTill(t)
                endpar
                else if (tillStatus(t) = Available and cardStatus(t) = Empty) then seqblock
                        print "User has inserted a card into " + t
                        cardStatus(t) := Inserted
                        choose x in [1,2,3] do 
                        	cardNumber(t) := x
                endseqblock
        endpar
endpar