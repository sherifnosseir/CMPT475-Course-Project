
        selectTill(Client3) := Till3

        INqueue:=[]
        OUTqueue:=[]



        program(self) := undef
        program(ATM_Controller) := @ATMController
        program(Network_Controller) := @NetworkController
        program(user) := @UserBehaviour
        program(observer) := @Observer

}

rule RandomVal =
        return rnd in
        choose x in [1 .. 100] do
                rnd := x/100

rule ATMController = {
        forall c in Client do{
                if clientAction(c) = EnterPIN then seqblock
                        if userInput(c) = CorrectPIN then seqblock
                                accountStatus(c) := LoggedIn
                        endseqblock
                endseqblock

                if(clientAction(c) = LogOut) then seqblock
                        tillStatus(selectTill(c)) := Available
                        accountStatus(c) := LoggedOut
                        returnData(selectTill(c)) := NoData
                endseqblock
                else if (accountStatus(c) = LoggedIn and tillStatus(selectTill(c)) = Available) then seqblock
                        tillStatus(selectTill(c)) := InUse
                endseqblock
                else if (accountStatus(c) = LoggedIn and tillStatus(selectTill(c)) = BeginProcessing) then seqblock
                        print "***************"+selectTill(c)
                        print "_+_+_+_+_+_+_+_"+clientAction(c)
                        enqueue [selectTill(c), clientAction(c)] into INqueue
                        print size(INqueue)
                        tillStatus(selectTill(c)):= Processing
                endseqblock
        }

        forall t in Till do{
                if (returnData(t)!=NoData)then seqblock
                        print "@@@ " + t + " Result @@@: " + returnData(t)
                        tillStatus(t):= InUse
                endseqblock
        }
}

rule NetworkController = {
                if (size(INqueue) > 0) then seqblock
                dequeue nextdbOp from INqueue
                PassToDatabase(head(nextdbOp), head(tail(nextdbOp)))
        endseqblock

                if (size(OUTqueue) > 0) then seqblock
                dequeue nextTillOp from OUTqueue
                PassToTill(head(nextTillOp), head(tail(nextTillOp)))
        endseqblock
}

rule PassToDatabase(till, action) = seqblock
        if (action = Withdraw) then seqblock
                if RandomVal > 0.7 then seqblock
                        enqueue [till, "Successful"] into OUTqueue
                endseqblock
                else seqblock
                        enqueue [till, "Unsuccessful"] into OUTqueue
                endseqblock
        endseqblock
        else if(action = RequestStatement) then seqblock
                enqueue [till, "Successful"] into OUTqueue
        endseqblock
        else if(action = CheckBalance) then seqblock
                enqueue [till, "Report"] into OUTqueue
        endseqblock
endseqblock

rule PassToTill(till, retData) = seqblock
        returnData(till):= retData
endseqblock



rule UserBehaviour = {
        forall c in Client do{
                if accountStatus(c) = LoggedOut then seqblock
                        if clientAction(c) = EnterPIN then seqblock
                                if RandomVal > 0.2 then seqblock
                                        userInput(c) := CorrectPIN
                                endseqblock
                                else seqblock
                                        userInput(c) := IncorrectPIN
                                endseqblock
                        endseqblock
                        else if clientAction(c) = LogOut then seqblock
                                if RandomVal > 0.8 then seqblock
                                        clientAction(c) := EnterPIN
                                endseqblock
                        endseqblock
                endseqblock
                if accountStatus(c) = LoggedIn then seqblock
                        if tillStatus(selectTill(c)) = InUse then seqblock
                                choose x in [1 .. 4] do
                                        if x = 1 then seqblock
                                                clientAction(c) := CheckBalance
                                                tillStatus(selectTill(c)):= BeginProcessing
                                        endseqblock
                                        else if x = 2 then seqblock
                                                clientAction(c) := Withdraw
                                                tillStatus(selectTill(c)):= BeginProcessing
                                        endseqblock
                                        else if x = 3 then seqblock
                                                clientAction(c) := RequestStatement
                                                tillStatus(selectTill(c)):= BeginProcessing
                                        endseqblock
                                        else if x = 4 then seqblock
                                                clientAction(c) := LogOut
                                        endseqblock
                        endseqblock
                endseqblock
        }
}



rule Observer = {
        forall t in Till do{
                print "=== " + t + ": " + tillStatus(t)
        }
        forall c in Client do{
                print c + " is " + clientAction(c)
        }
        print "INQUEUE: " + size(INqueue)
        print "OUTQUEUE: "+size(OUTqueue)

}
